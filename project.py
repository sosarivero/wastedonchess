import re
import requests
from datetime import datetime, timedelta


def get_chesscom_archive(player: str, year: str, month: str):
    """
    Takes a username, a year (four digits) and a month (zero-padded).
    Returns a json of the queried user's Chess.com games during said month.
    """
    archive = requests.get(
        f"https://api.chess.com/pub/player/{player}/games/{year}/{month}"
    )
    json_archive = archive.json()

    return json_archive


def get_pgn_gamelength(pgn: str):
    """
    Take a Chess game in pgn format, extracts the start and end times, and
    returns the difference (i.e the total game's length) as a timedelta object.
    """
    pgn_starttime = re.search(r"(?:StartTime \")(\d{2}[:]\d{2}[:]\d{2})", pgn).group(1)
    pgn_endtime = re.search(r"(?:EndTime \")(\d{2}[:]\d{2}[:]\d{2})", pgn).group(1)

    start_time = datetime.strptime(pgn_starttime, "%H:%M:%S")
    end_time = datetime.strptime(pgn_endtime, "%H:%M:%S")

    gamelength = end_time - start_time

    return gamelength.total_seconds()


def get_total_length(archive: dict):
    """
    Takes an archive of games generated by get_chesscom_archive().
    Returns a tuple that contains the total length of all the games contained
    within the archive, and the total number of games played.
    """
    total_time = 0
    games_qty = len(archive["games"])

    for game in archive["games"]:
        pgn = game["pgn"]
        total_time += get_pgn_gamelength(pgn)

    timedelta_total = str(timedelta(seconds=total_time))

    return timedelta_total, games_qty


def main():
    player = input("Chess.com username: ")
    year = input("Year (yyyy): ")
    month = input("Month (mm): ")

    games_archive = get_chesscom_archive(player, year, month)

    result = get_total_length(games_archive)
    gamelength = result[0]
    games = result[1]

    print(
        f"{player} has played {games} games for a total time of {gamelength} during {year}/{month}"
    )


if __name__ == "__main__":
    main()
